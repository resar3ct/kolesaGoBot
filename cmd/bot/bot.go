package bot

import (
	"crypto/md5"
	"encoding/hex"
	"encoding/json"

	"encoding/xml"
	"fmt"
	"io/ioutil"
	"kolesaGoBot/internal/models"
	"log"
	"net/http"
	"strconv"
	"time"

	"gopkg.in/telebot.v3"
)

type KolesaBot struct {
	Bot         *telebot.Bot
	Users       *models.UserModel
	MarvPublic  string
	MarvPrivate string
}

func (bot *KolesaBot) StartHandler(ctx telebot.Context) error {
	newUser := models.User{
		Name:       ctx.Sender().Username,
		TelegramId: ctx.Chat().ID,
		FirstName:  ctx.Sender().FirstName,
		LastName:   ctx.Sender().LastName,
		ChatId:     ctx.Chat().ID,
	}

	existUser, err := bot.Users.FindOne(ctx.Chat().ID)

	if err != nil {
		log.Printf("Ошибка получения пользователя %v", err)
	}

	if existUser == nil {
		err := bot.Users.Create(newUser)

		if err != nil {
			log.Printf("Ошибка создания пользователя %v", err)
		}
	}

	return ctx.Send("Привет, " + ctx.Sender().FirstName)
}

func InitBot(token string) *telebot.Bot {
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := telebot.NewBot(pref)

	if err != nil {
		log.Fatalf("Ошибка при инициализации бота %v", err)
	}

	return b
}

type RSS struct {
	Items []Item `xml:"channel>item"`
}

type Item struct {
	URL   string `xml:"guid"`
	Title string `xml:"title"`
}

func (bot *KolesaBot) HabrNews(ctx telebot.Context) error {
	resp, err := http.Get("https://habrahabr.ru/rss/best/")
	if err != nil {
		log.Printf("Ошибка запроса %v", err)
		return ctx.Send("Хабр не отвечает")
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	rss := new(RSS)
	err = xml.Unmarshal(body, rss)
	if err != nil {
		return err
	}

	for _, item := range rss.Items {
		if err := ctx.Send(item.URL + "\n" + item.Title); err != nil {
			return telebot.ErrNoRightsToSendStickers
		}
	}
	return nil
}

func GetMD5Hash(text string) string {
	hasher := md5.New()
	hasher.Write([]byte(text))
	return hex.EncodeToString(hasher.Sum(nil))
}

type Results struct {
	Description string `json:"description"`
}

type Data struct {
	Results Results `json:"results"`
}

type AutoGenerated struct {
	Data struct {
		Results []struct {
			Description string `json:"description"`
		} `json:"results"`
	} `json:"data"`
}

func (bot *KolesaBot) MarvelHero(ctx telebot.Context) error {
	arg := ctx.Args()
	MarvPublic := "a995a03c024c332936e0c194cde204cc"
	MarvPrivate := "f076c269f7f0fe137c275c66cb82ac0e86fd90d7"
	now := time.Now()
	sec := now.Unix()
	a := strconv.FormatInt(sec, 16) + MarvPrivate + MarvPublic
	hash := GetMD5Hash(a)

	resp, err := http.Get(fmt.Sprintf("https://gateway.marvel.com:443/v1/public/characters?ts=%s&name=%s&apikey=a995a03c024c332936e0c194cde204cc&hash=%s", strconv.FormatInt(sec, 16), arg[0], hash))
	if err != nil {
		log.Printf("Ошибка запроса %v", err)
		return ctx.Send("Marvel не отвечает")
	}

	defer resp.Body.Close()
	newMessage := AutoGenerated{}

	json.NewDecoder(resp.Body).Decode(&newMessage)
	return ctx.Send(newMessage.Data.Results[0].Description)
}
